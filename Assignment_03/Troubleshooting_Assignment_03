{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Troubleshooting_Assignment_03","provenance":[],"authorship_tag":"ABX9TyMJvYpFjGXoLIdX6RhrBiKA"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"lnBaaeRPs_xw"},"source":["## Assignment 3\n","**Author:** Hala Algrain\n","\n","**Date:** 2.14.2021\n","\n","*** TRIAL AND ERROR CODE FOR LATER REFERENCE**"]},{"cell_type":"code","metadata":{"id":"KY4u_9Aj69Dg"},"source":["import random\n","randomlist = []\n","for i in range(0,100):\n","  n = random.randint(0,9)\n","  randomlist.append(n)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y_vHDQl2tN_T"},"source":["#### 1. Print them in a 10 by 10 matrix neatly arranged like the following (one space between each number).\n","\n","> Indented block\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5zddblPA949r","executionInfo":{"status":"ok","timestamp":1613349366326,"user_tz":300,"elapsed":258,"user":{"displayName":"Hala Algrain","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh4pQaKxfQDxdRI1dxqA2dyPdKh2arxu_kkQ7DE=s64","userId":"02048555611325977402"}},"outputId":"51ba8fe8-12d6-47d7-ef13-ab530bc3260d"},"source":["#using list comprehension to create matrix\n","matrix1 = [ [random.randint(0,9) for a in range(10)] for b in range(10) ] \n","# troubleshooting code print(matrix1) \n","# troubleshooting code print(*zip(*matrix1), sep='\\n')\n","for i in range(len(matrix1)):\n","    for j in range(len(matrix1[i])):\n","        print(matrix1[i][j], end=' ')\n","    print()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["4 9 0 9 8 1 1 8 5 5 \n","8 8 7 1 5 8 3 0 8 5 \n","8 2 7 5 7 9 9 9 5 8 \n","0 2 8 0 9 2 4 1 9 6 \n","9 9 5 4 1 7 7 2 0 5 \n","6 1 7 4 5 7 8 5 9 5 \n","1 4 1 5 1 4 8 4 5 1 \n","1 7 2 7 5 4 1 5 3 8 \n","9 9 6 1 1 2 7 0 5 9 \n","2 9 4 5 7 8 6 0 1 2 \n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"fRKhBZreHoyM"},"source":["#### 2. If the random number is an odd number, print \"@\" instead.\n"]},{"cell_type":"code","metadata":{"id":"S0DHEjWlHoNG"},"source":["matrix2 = []\n","for z in matrix1: # error: z refers to matrix element which is a list\n","  if (z%2)==0:\n","    matrix2.append(z)\n","  else:\n","    matrix2.append(\"@\")\n","\n","for x in range(len(matrix2)):\n","    for y in range(len(matrix2[i])):\n","        print(matrix2[x][y], end=' ')\n","    print()\n","\n","for w in range(len(matrix1)):\n","    for v in range(len(matrix1[w])):\n","        if \n","        print(matrix1[i][j], end=' ')\n","    print()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JZXEhg9aQUxX"},"source":["#### 3. Calculate and Print the total of each row ] (use \"*\" to separate the total from the numbers).\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"ENc6Pcv3QZjp","executionInfo":{"status":"error","timestamp":1613355614414,"user_tz":300,"elapsed":2482,"user":{"displayName":"Hala Algrain","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh4pQaKxfQDxdRI1dxqA2dyPdKh2arxu_kkQ7DE=s64","userId":"02048555611325977402"}},"outputId":"23f54cbc-eb6b-4c5c-e9ae-7ba8c1793b2e"},"source":["matrix3 = [ [random.randint(0,9) for a in range(10)] for b in range(10) ] \n","[sum(row) for row in matrix3]\n","\n","matrix_1 =[]\n","for i in range(10)\n","  new_row = random.randint(0,9)\n","append.matrix_1(i)\n","\n","#for z in matrix3\n"," #   total = sum(i)\n","#print(total)\n","  #total = sum(z)\n","  #\n"," ## matrix3.append(total)\n","\n","#for i in range(len(matrix3)):\n"," #   for j in range(len(matrix3[i])):\n","  #      print(matrix3[i][j], end=' ')\n","   # print()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-125-dd8a44d161e4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmatrix3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmatrix3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-125-dd8a44d161e4>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmatrix3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m9\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;34m[\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mrow\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmatrix3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'list' object is not callable"]}]},{"cell_type":"markdown","metadata":{"id":"kCbeIDZ6HkiO"},"source":["## TROUBLESHOOTING CODE & TRIAL/ERROR"]},{"cell_type":"code","metadata":{"id":"nYVruw7IDpNP"},"source":["row_1 = []\n","for i in range(0,10):\n","  n_row = random.randint(0,9)\n","  row_1.append(n)\n","print(row_1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"M8avCNbYtQRF"},"source":["def createMatrix(rowCount, colCount, dataList):\n","    mat = []\n","    for i in range(rowCount):\n","        rowList = []\n","        for j in range(colCount):\n","            # you need to increment through dataList here, like this:\n","            rowList.append(dataList[rowCount * i + j])\n","        mat.append(rowList)\n","\n","    return mat\n","print(mat)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_SgT6NQ2yuQK"},"source":["matrix1 = [[0 for x in range(10)] for y in range(10)]\n","#print(matrix1) ## not going tuse print function which always has []\n","#print('\\n'.join) end='')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"57dfA_Bz9AgR"},"source":["# Python3 code to demonstrate  \n","# initializing matrix \n","# using list comprehension \n","  \n","# Declaring rows \n","row = 10\n","  \n","# Declaring columns \n","col = 10\n","  \n","# using list comprehension  \n","# to initializing matrix \n","\n","  \n","# printing result  \n","print(\"The matrix after initializing : \" + str(matrix1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5Xrd_f7bYySZ"},"source":["import random\n","list1 = []\n"," for i in range(10):\n","    i=random.randint(0,9)\n","    list1.append(i)\n","    print(i)\n","\n","import random\n","list1 = []\n"," for i in range(10):\n","    i=random.randint(0,9)\n","    list1.append(i)\n","    print(i)\n","\n","\n","import random\n","matrix1 = []\n","list1 = []\n","for j in range(10):\n","  for i in range(10):\n","    i=random.randint(0,9)\n","    list1.append(i)\n","\n","for i in range(len(matrix1)):\n","    for j in range(len(matrix1[i])):\n","        print(matrix1[i][j], end=' ')\n","\n","# print(matrix1)\n","# CHECK\n","# print(len(matrix1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o_q0rErSY-Sp"},"source":["   lists = []\n","   for p in range(10):\n","        lists.append([])\n","\n","  \n","    print()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"j6CGynJUYyzZ"},"source":["   #print(j, end=\" \")\n","#print(list1[i][j], end=' ')\n"," # matrix1.append(list1)\n","  #print(matrix1[i][j], end=' ')\n"," # print(\"\\n\", matrix1, sep=' ', end=\"\")\n","  \n","\n","#for i in range(len(matrix1)):\n"," #   for j in range(len(matrix1[i])):\n","  #      print(matrix1[i][j], end=' ')\n","   # print()\n","#print(\"\\n\", len(list1))\n","# print(matrix1)\n","# CHECK\n","##"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"F9Tra_VuY1Cb"},"source":[""],"execution_count":null,"outputs":[]}]}